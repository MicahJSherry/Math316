---
title: "Pittsburgh Weather - Travis, Micah, Ira"
format: revealjs
execute:
  echo: false
  warning: false
  message: false
---

## Dataset Overview

```{python}
import pandas as pd
import altair as alt
from great_tables import GT, md, style, loc

# Load dataset
df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df["DATE"]  = pd.to_datetime("2000-" + df["DATE"].astype(str), errors="coerce")
df["Month"] = df["DATE"].dt.month
df["Day"]   = df["DATE"].dt.day
df["DayOfYear"]   = df["DATE"].dt.dayofyear
df["Hour"]  = df["DATE"].dt.hour

# Drop all *_ATTRIBUTES columns
df_clean = df.loc[:, ~df.columns.str.contains("_ATTRIBUTES")]

# Rename key variables
rename_map = {
    "HLY-CLOD-PCTCLR": "Cloud (% Clear)",
    "HLY-DEWP-NORMAL": "DewPoint (°F)",
    "HLY-PRES-NORMAL": "Pressure (hPa)",
    "HLY-TEMP-NORMAL": "Temperature (°F)",
    "HLY-WIND-AVGSPD": "Wind (MPH)"
}
df_clean = df_clean.rename(columns=rename_map)

# Unit conversion - divide by 10 to get correct values
conversion_columns = ["Cloud (% Clear)", "DewPoint (°F)", "Pressure (hPa)", "Temperature (°F)", "Wind (MPH)"]
for col in conversion_columns:
    if col in df_clean.columns:
        df_clean[col] = df_clean[col] / 10.0

rows, cols = df_clean.shape
print(f"Dataset contains {rows:,} rows and {cols} columns (after dropping attributes)")

print("\nKey column categories:")
print("- Station info: STATION, DATE, LATITUDE, LONGITUDE, ELEVATION, NAME")
print("- Weather variables: Cloud, DewPoint, Pressure, Temperature, Wind")

summary = df_clean[["Cloud (% Clear)", "DewPoint (°F)", "Pressure (hPa)", "Temperature (°F)", "Wind (MPH)"]].describe().round(2).reset_index(names="Statistic")

table = GT(
        summary,
        rowname_col="Statistic" 
    ).tab_header(
        title=md("Pittsburgh Hourly Weather Observations(1981-2010)")
    ).tab_options(
        table_width = "700px")
table

```
---

## Cloud Cover – Monthly Trends

```{python}
cloud_columns = {
    "HLY-CLOD-PCTCLR": "Clear",
    "HLY-CLOD-PCTFEW": "Few",
    "HLY-CLOD-PCTSCT": "Scattered",
    "HLY-CLOD-PCTBKN": "Broken",
    "HLY-CLOD-PCTOVC": "Overcast"
}
df = df.rename(columns=cloud_columns)

cloud_monthly = df.groupby("Month")[list(cloud_columns.values())].mean().reset_index()

cloud_long = cloud_monthly.melt("Month", var_name="Condition", value_name="Percent")

chart = alt.Chart(cloud_long).mark_line(point=True).encode(
    x="Month:O",
    y="Percent:Q",
    color="Condition:N"
).properties(
    title="Average Cloud Cover by Month (1981–2010)",
    width=700,
    height=500
)

chart
```
---

## Average Temperature – daily Trends
```{python}
temp_col = "HLY-TEMP-NORMAL"

daily_stats = (
    df.groupby("DayOfYear")[temp_col]
        .agg(["min", "mean", "max"])
        .rename(columns={"min": "min_temp", "mean": "mean_temp", "max": "max_temp"})
        .reset_index()
)
daily_stats[["min_temp","mean_temp","max_temp"]] = (daily_stats[["min_temp","mean_temp","max_temp"]]/10).round(1)

summary = daily_stats.melt(id_vars=["DayOfYear"], var_name="temp_type",value_name="temp")

chart = alt.Chart(summary).mark_line().encode(
    x=alt.X("DayOfYear",title= "Day"),
    y=alt.Y("temp:Q",title="Average Temperature (F°)"),
    color="temp_type:N"
).properties(
    title="Average Temperature by Day (1981–2010)",
    width=700,
    height=500
)

chart


```
---

## Daily Wind Speeds - Hourly Trends

```{python}
df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")

# Add date and season columns
df['DATE'] = pd.to_datetime('2000-' + df['DATE'].astype(str))
df['Month'] = df['DATE'].dt.month
df['Hour'] = df['DATE'].dt.hour
df['Season'] = df['Month'].map({12: 'Winter', 1: 'Winter', 2: 'Winter',
                                3: 'Spring', 4: 'Spring', 5: 'Spring',
                                6: 'Summer', 7: 'Summer', 8: 'Summer',
                                9: 'Fall', 10: 'Fall', 11: 'Fall'})

speed_columns = ['HLY-WIND-AVGSPD', 'HLY-WIND-VCTSPD']
for col in speed_columns:
    df[col] = df[col] / 10.0

# Finding hourly wind speed patterns
hourly_wind = df.groupby('Hour')['HLY-WIND-AVGSPD'].mean().reset_index()

# Creating hourly wind speed chart
hourly_chart = alt.Chart(hourly_wind).mark_area(
    line={'color': 'steelblue', 'strokeWidth': 2},
    color=alt.Gradient(
        gradient='linear',
        stops=[alt.GradientStop(color='lightblue', offset=0),
               alt.GradientStop(color='steelblue', offset=1)],
        x1=1, y1=1, x2=1, y2=0
    )
).encode(
    x=alt.X('Hour:O', title='Hour of Day'),
    y=alt.Y('HLY-WIND-AVGSPD:Q', title='Average Wind Speed (mph)')
).properties(
    width=700,
    height=500,
    title='Average Wind Speed by Hour (1981-2010)'
)

hourly_chart

```
---

## Key Questions for Dashboard

- **How do all three relate (Wind, Temperature, Clouds)?**  
- **How does Pressure and DewPoint affect the other 3?**  
- **Are there any interesting seasonal patterns?**  