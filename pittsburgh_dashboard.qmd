---
title: "Pittsburgh Dashboard - Phase 2"
format:
  dashboard:
    theme: yeti
    pages: true
    orientation: columns
    embed-resources: true
    standalone: true
---

<!-- Page 1 -->
# Overview

::: {.panel-tabset}

## Dataset Overview
```{python}
import pandas as pd
import altair as alt
from great_tables import GT, md

# Load dataset
df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df["DATE"]  = pd.to_datetime("2000-" + df["DATE"].astype(str), errors="coerce")
df["Month"] = df["DATE"].dt.month
df["Day"]   = df["DATE"].dt.day
df["DayOfYear"]   = df["DATE"].dt.dayofyear
df["Hour"]  = df["DATE"].dt.hour

# Drop all *_ATTRIBUTES columns
df_clean = df.loc[:, ~df.columns.str.contains("_ATTRIBUTES")]

# Rename key variables
rename_map = {
    "HLY-CLOD-PCTCLR": "Cloud (% Clear)",
    "HLY-DEWP-NORMAL": "DewPoint (°F)",
    "HLY-PRES-NORMAL": "Pressure (hPa)",
    "HLY-TEMP-NORMAL": "Temperature (°F)",
    "HLY-WIND-AVGSPD": "Wind (MPH)"
}
df_clean = df_clean.rename(columns=rename_map)

# Unit conversion - divide by 10 to get correct values
conversion_columns = ["Cloud (% Clear)", "DewPoint (°F)", "Pressure (hPa)", "Temperature (°F)", "Wind (MPH)"]
for col in conversion_columns:
    if col in df_clean.columns:
        df_clean[col] = df_clean[col] / 10.0

rows, cols = df_clean.shape
print(f"Dataset contains {rows:,} rows and {cols} columns (after dropping attributes)")

print("\nKey column categories:")
print("- Station info: STATION, DATE, LATITUDE, LONGITUDE, ELEVATION, NAME")
print("- Weather variables: Cloud, DewPoint, Pressure, Temperature, Wind")

summary = df_clean[["Cloud (% Clear)", "DewPoint (°F)", "Pressure (hPa)", "Temperature (°F)", "Wind (MPH)"]].describe().round(2).reset_index(names="Statistic")

table = GT(
        summary,
        rowname_col="Statistic" 
    ).tab_header(
        title=md("Pittsburgh Hourly Weather Observations (1981–2010)")
    ).tab_options(
        table_width = "700px")
table
```
:::

---

<!-- Page 2 -->
# Visualizations
::: {.panel-tabset}

## Monthly Cloud Trends
```{python}
import altair as alt
import pandas as pd

df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df["DATE"] = pd.to_datetime("2000-" + df["DATE"].astype(str), errors="coerce")
df["Month"] = df["DATE"].dt.month

cloud_cols = {
    "HLY-CLOD-PCTCLR": "Clear",
    "HLY-CLOD-PCTFEW": "Few",
    "HLY-CLOD-PCTSCT": "Scattered",
    "HLY-CLOD-PCTBKN": "Broken",
    "HLY-CLOD-PCTOVC": "Overcast"
}
df = df.rename(columns=cloud_cols)

cloud_columns = ["Clear", "Few", "Scattered", "Broken", "Overcast"]
for col in cloud_columns:
    if col in df.columns:
        df[col] = df[col] / 10.0

cloud_monthly = df.groupby("Month")[list(cloud_cols.values())].mean().reset_index()
cloud_long = cloud_monthly.melt("Month", var_name="Condition", value_name="Percent")

chart1 = alt.Chart(cloud_long).mark_line(point=True).encode(
    x=alt.X("Month:O", title="Month"),
    y=alt.Y("Percent:Q", title="Average Cloud Cover (%)"),
    color=alt.Color("Condition:N", title="Condition")
).properties(
    title="Average Cloud Cover by Month (1981–2010)",
    width=700,
    height=450
)
chart1
```

## Clear vs Overcast
```{python}
cloud_compare = df.groupby("Month")[["Clear", "Overcast"]].mean().reset_index()
cloud_compare_long = cloud_compare.melt("Month", var_name="Condition", value_name="Percent")

chart2 = alt.Chart(cloud_compare_long).mark_bar().encode(
    x=alt.X("Month:O", title="Month"),
    y=alt.Y("Percent:Q", title="Frequency (%)"),
    color=alt.Color("Condition:N", title="Condition"),
    tooltip=["Month:O", "Condition:N", "Percent:Q"]
).properties(
    title="Clear vs Overcast Sky Frequency by Month",
    width=700,
    height=450
)
chart2
```

## Cloud Distribution
```{python}
cloud_monthly = df.groupby("Month")[list(cloud_cols.values())].mean().mean().reset_index()
cloud_monthly.columns = ["Condition", "Percent"]

chart3 = alt.Chart(cloud_monthly).mark_arc(innerRadius=60).encode(
    theta=alt.Theta("Percent:Q"),
    color=alt.Color("Condition:N"),
    tooltip=[alt.Tooltip("Condition:N"), alt.Tooltip("Percent:Q", format=".1f")]
).properties(
    title="Overall Cloud Cover Distribution (1981–2010, Pittsburgh)",
    width=700,
    height=450
)
chart3
```

## Scatter by Month
```{python}
cloud_monthly = df.groupby("Month")[[ "Clear", "Few", "Scattered", "Broken", "Overcast" ]].mean().reset_index()
cloud_long = cloud_monthly.melt("Month", var_name="Condition", value_name="Percent")

chart4 = alt.Chart(cloud_long).mark_point(size=80).encode(
    x=alt.X("Condition:N", title="Cloud Type"),
    y=alt.Y("Percent:Q", title="Cloud Cover (%)"),
    color=alt.Color("Condition:N"),
    tooltip=["Month:O", "Condition:N", "Percent:Q"]
).interactive().properties(
    title="Cloud Cover Scatter – All Types by Month",
    width=700,
    height=450
)
chart4
```

## Average Temperature
```{python}

df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df["DATE"] = pd.to_datetime("2000-" + df["DATE"].astype(str), errors="coerce")
df["DayOfYear"] = df["DATE"].dt.dayofyear

temp_col = "HLY-TEMP-NORMAL"

daily_stats = (
    df.groupby("DayOfYear")[temp_col]
        .agg(["min", "mean", "max"])
        .rename(columns={"min": "min_temp", "mean": "mean_temp", "max": "max_temp"})
        .reset_index()
)
daily_stats[["min_temp", "mean_temp", "max_temp"]] = (daily_stats[["min_temp", "mean_temp", "max_temp"]] / 10).round(1)

summary = daily_stats.melt(id_vars=["DayOfYear"], var_name="temp_type", value_name="temp")

chart5 = alt.Chart(summary).mark_line(point=True).encode(
    x=alt.X("DayOfYear", title="Day of Year"),
    y=alt.Y("temp:Q", title="Temperature (°F)"),
    color=alt.Color("temp_type:N", title="Temperature Type")
).properties(
    title="Average Temperature by Day (1981–2010)",
    width=700,
    height=500
)
chart5
```

## Temperature and Dew Point
```{python}
df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df["DATE"] = pd.to_datetime("2000-" + df["DATE"].astype(str), errors="coerce")
df["DayOfYear"] = df["DATE"].dt.dayofyear
df["Hour"] = df["DATE"].dt.hour
temp_cols = ["HLY-TEMP-NORMAL","HLY-TEMP-10PCTL","HLY-TEMP-90PCTL"]+["HLY-DEWP-NORMAL","HLY-DEWP-10PCTL","HLY-DEWP-90PCTL"]
df[temp_cols]= df[temp_cols]/10
daily_stats = (
    df.groupby("DayOfYear")[temp_cols]
        .agg("mean")
        .reset_index()
)


#summary = daily_stats.melt(id_vars=["DayOfYear"], var_name="temp_type",value_name="temp")

chart = alt.Chart(daily_stats).mark_line().encode(
    x=alt.X("DayOfYear",title= "Day"),
    y=alt.Y("HLY-TEMP-NORMAL:Q",title="Average Temperature (F°)")
).properties(
    title="Average Temperature by Day (1981–2010)",
    width=700,
    height=500
)
temp_pctl = chart.mark_area(opacity=.3).encode(
    x=alt.X("DayOfYear",title= "Day"),
    y="HLY-TEMP-10PCTL:Q",y2="HLY-TEMP-90PCTL:Q"
)
dew = chart.mark_line(color="red").encode(
    x=alt.X("DayOfYear",title= "Day"),
    y="HLY-DEWP-NORMAL:Q"
)
dew_pctl = chart.mark_area(opacity=.3, color="red").encode(
    x=alt.X("DayOfYear",title= "Day"),
    y="HLY-DEWP-10PCTL:Q",
    y2="HLY-DEWP-90PCTL:Q"
)
chart+temp_pctl+dew+dew_pctl 
```
## Dew Point vs Wind Speed
```{python}
cols = ["HLY-DEWP-NORMAL",'HLY-WIND-AVGSPD',"Hour"]



daily_df = df.groupby("DayOfYear")[cols].sample(n=2).reset_index()
bins = [0, 6, 12, 18, 24]
labels = ['Night', 'Morning', 'Afternoon', 'Early Morning'] 
daily_df['Time_Category'] = pd.cut(
    daily_df['Hour'],
    bins=bins,
    labels=labels,
    right=False, # Use [start, end) interval (inclusive start, exclusive end)
    include_lowest=True # Include the lowest value (0)
)

chart = alt.Chart(daily_df).mark_point().encode(
    x=alt.X(cols[0],title="Dew Point (F°)"),
    y=alt.Y(cols[1],title='Average Wind Speed (mph)'),
    color="Time_Category:N"
).properties(
    title="Dew Point vs Wind Speed",
    width=700,
    height=450
)
chart
```

## Pressure vs Wind Speed
```{python}
cols = ["DELTA-PRES",'HLY-WIND-AVGSPD',"Hour"]
df["DELTA-PRES"] = df["HLY-PRES-NORMAL"] - df["HLY-PRES-NORMAL"].mean()


daily_df = df.groupby("DayOfYear")[cols].sample(n=2).reset_index()
bins = [0, 6, 12, 18, 24]
labels = ['Night', 'Morning', 'Afternoon', 'Early Morning'] 
daily_df['Time_Category'] = pd.cut(
    daily_df['Hour'],
    bins=bins,
    labels=labels,
    right=False, # Use [start, end) interval (inclusive start, exclusive end)
    include_lowest=True # Include the lowest value (0)
)

chart = alt.Chart(daily_df).mark_point().encode(
    x=alt.X(cols[0],title="Deviation from mean pressure"),
    y=alt.Y(cols[1],title='Average Wind Speed (mph)'),
    color="Time_Category:N"
).properties(
    title="Pressure vs Wind Speed",
    width=700,
    height=450
)
chart

```

## Daily Wind Speeds
```{python}

df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df['DATE'] = pd.to_datetime('2000-' + df['DATE'].astype(str))
df['Month'] = df['DATE'].dt.month
df['Hour'] = df['DATE'].dt.hour
df['Season'] = df['Month'].map({12: 'Winter', 1: 'Winter', 2: 'Winter',
                                3: 'Spring', 4: 'Spring', 5: 'Spring',
                                6: 'Summer', 7: 'Summer', 8: 'Summer',
                                9: 'Fall', 10: 'Fall', 11: 'Fall'})

for col in ['HLY-WIND-AVGSPD', 'HLY-WIND-VCTSPD']:
    df[col] = df[col] / 10.0

hourly_wind = df.groupby('Hour')['HLY-WIND-AVGSPD'].mean().reset_index()

chart6 = alt.Chart(hourly_wind).mark_area(
    line={'color': 'steelblue', 'strokeWidth': 2},
    color=alt.Gradient(
        gradient='linear',
        stops=[alt.GradientStop(color='lightblue', offset=0),
               alt.GradientStop(color='steelblue', offset=1)],
        x1=1, y1=1, x2=1, y2=0
    )
).encode(
    x=alt.X('Hour:O', title='Hour of Day'),
    y=alt.Y('HLY-WIND-AVGSPD:Q', title='Average Wind Speed (mph)')
).properties(
    width=700,
    height=500,
    title='Average Wind Speed by Hour (1981–2010)'
)
chart6
```

## Monthly Wind Speeds
```{python}
df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")

speed_columns = ['HLY-WIND-AVGSPD', 'HLY-WIND-VCTSPD']
for col in speed_columns:
    df[col] = df[col] / 10.0

# Add date and season columns
df['DATE'] = pd.to_datetime('2000-' + df['DATE'].astype(str))
df['Month'] = df['DATE'].dt.month
df['Hour'] = df['DATE'].dt.hour
df['Season'] = df['Month'].map({12: 'Winter', 1: 'Winter', 2: 'Winter',
                                3: 'Spring', 4: 'Spring', 5: 'Spring',
                                6: 'Summer', 7: 'Summer', 8: 'Summer',
                                9: 'Fall', 10: 'Fall', 11: 'Fall'})

monthly_wind = df.groupby('Month').agg({
    'HLY-WIND-AVGSPD': 'mean',
    'HLY-WIND-VCTSPD': 'mean'
}).reset_index()

monthly_wind['Month_Name'] = monthly_wind['Month'].map({
    1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
    7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
})

# Make chart
chart7 = alt.Chart(monthly_wind).mark_line(point=True).encode(
    x=alt.X('Month', title='Month'),
    y=alt.Y('HLY-WIND-AVGSPD', title='Average Wind Speed (mph)'),
).properties(
    width=700,
    height=500,
    title='Monthly Average Wind Speeds'
)

chart7
```

## Wind Direction Frequency
```{python}
percentage_columns = ['HLY-WIND-1STPCT', 'HLY-WIND-2NDPCT', 'HLY-WIND-PCTCLM']
for col in percentage_columns:
    df[col] = df[col] / 10.0

def find_cardinal_direction(direction_value):
        direction_map = {1: 'N', 2: 'NE', 3: 'E', 4: 'SE', 5: 'S', 6: 'SW', 7: 'W', 8: 'NW'}
        return direction_map.get(int(direction_value))

df['Primary_Wind_Direction'] = df['HLY-WIND-1STDIR'].apply(find_cardinal_direction)

# 1st direction frequency
direction_counts = df['Primary_Wind_Direction'].value_counts().reset_index()
direction_counts.columns = ['Direction', 'Count']
direction_counts['Percentage'] = (direction_counts['Count'] / direction_counts['Count'].sum()) * 100

# Sort order cardinally
direction_order = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']

# Sorting
ordered_data = []
for i, direction in enumerate(direction_order):
    if direction in direction_counts['Direction'].values:
        row = direction_counts[direction_counts['Direction'] == direction].iloc[0]
        row['sort_order'] = i
        ordered_data.append(row)

direction_counts_ordered = pd.DataFrame(ordered_data)

# Make Pie chart
chart8 = alt.Chart(direction_counts_ordered).mark_arc(
    innerRadius=0,
    outerRadius=120,
    stroke='white',
    strokeWidth=1
).encode(
    theta=alt.Theta('Count:Q'),
    color=alt.Color('Direction:N', 
                    scale=alt.Scale(scheme='category20'),
                    sort=direction_order,
                    legend=alt.Legend(title="Wind Direction")),
    order=alt.Order('sort_order:O'),
    tooltip=['Direction:N', 'Count:Q', alt.Tooltip('Percentage:Q', format='.1f')]
).properties(
    title='Wind Direction Distribution',
    width=600,
    height=600
)

chart8
```

## Wind Direction Frequency By Season
```{python}
seasonal_directions = df.groupby(['Season', 'Primary_Wind_Direction']).size().reset_index(name='Count')

seasonal_directions['Percentage'] = seasonal_directions.groupby('Season')['Count'].transform(
    lambda x: (x / x.sum()) * 100
)

season_order = ['Spring', 'Summer', 'Fall', 'Winter']

chart9 = alt.Chart(seasonal_directions).mark_bar().encode(
    x=alt.X('Primary_Wind_Direction:N', 
            title='Wind Direction',
            sort=direction_order),
    y=alt.Y('Percentage:Q', 
            title='Percentage of Time',
            scale=alt.Scale(domain=[0, 100])),
    color=alt.Color('Season:N', 
                    scale=alt.Scale(scheme='category10'),
                    sort=season_order),
    column=alt.Column('Season:N', 
                     title='Season',
                     sort=season_order),
    tooltip=['Season:N', 'Primary_Wind_Direction:N', 'Percentage:Q']
).properties(
    width=350,
    height=700,
    title='Seasonal Wind Direction Patterns'
)

chart9
```

## Pressure Range Frequency Pivot Table by Season
```{python}
import pandas as pd

# Unit conversion - divide pressure by 10 to get correct hPa values
df['HLY-PRES-NORMAL'] = df['HLY-PRES-NORMAL'] / 10.0

# Pressure ranges
pressure_bins = [1014, 1015, 1016, 1017, 1018, 1019, 1020, float('inf')]
pressure_labels = ['1014-1015', '1015-1016', '1016-1017', '1017-1018', 
                  '1018-1019', '1019-1020', '1020+']

df['Pressure_Range_hPa'] = pd.cut(df['HLY-PRES-NORMAL'], 
                                     bins=pressure_bins, 
                                     labels=pressure_labels, 
                                     right=False, 
                                     include_lowest=True)

pressure_range_pivot = pd.pivot_table(
    df,
    values='HLY-PRES-NORMAL',
    index='Pressure_Range_hPa',
    columns='Season',
    aggfunc='count',
    fill_value=0
)

pivot_table1 = pressure_range_pivot[['Spring', 'Summer', 'Fall', 'Winter']]

pivot_table1
```
:::

---

<!--Page 3-->
# Wind, Temperature, and Clouds Relationship

::: {.panel-tabset}

## Seasonal Relationship Visualization

```{python}
import pandas as pd
import altair as alt

df = pd.read_csv("Pittsburgh_hourly_normals_1981_2010.csv")
df["DATE"] = pd.to_datetime("2000-" + df["DATE"].astype(str), errors="coerce")
df["Month"] = df["DATE"].dt.month

cols = {
    "HLY-TEMP-NORMAL": "Temperature (°F)",
    "HLY-WIND-AVGSPD": "Wind (MPH)",
    "HLY-CLOD-PCTSCT": "Cloud (Scattered %)"
}
df = df.rename(columns=cols)

df = df[list(cols.values()) + ["Month"]].dropna()
df["Temperature (°F)"] /= 10
df["Wind (MPH)"] /= 10
df["Cloud (Scattered %)"] /= 10

df_norm = df.groupby("Month")[list(cols.values())].mean()
df_norm = (df_norm - df_norm.min()) / (df_norm.max() - df_norm.min())
df_norm = df_norm.reset_index().melt("Month", var_name="Variable", value_name="Normalized")

chart = alt.Chart(df_norm).mark_line(point=True).encode(
    x=alt.X("Month:O", title="Month"),
    y=alt.Y("Normalized:Q", title="Normalized Value (0–1)"),
    color=alt.Color("Variable:N", title="Variable"),
    tooltip=["Month", "Variable", "Normalized"]
).properties(
    title="Seasonal Relationship of Temperature, Wind, and Cloud Cover",
    width=700,
    height=500
)

chart
```

## Seasonal Relationship Pivot Table

```{python}
pivot = pd.pivot_table(
    df,
    values=["Temperature (°F)", "Wind (MPH)", "Cloud (Scattered %)"],
    index="Month",
    aggfunc="mean"
).round(2)

pivot

```


## Observed Trends Summary

```{python}
print("Findings:")
print("- June-August: temperature rises and wind decreases causing more scattered clouds in the sky.")
print("- September-December: temperature falls and wind picks up, while cloud cover decreases.")
print("- This proves the higher the temperature and slower the wind, the more clouds there are and vice versa.")
```

:::

---

<!-- Page 4 -->
# Research Questions
::: {.panel-tabset}

## Questions
- **How do all three relate (Wind, Temperature, Clouds)?**  
- **How does Pressure and DewPoint affect the other 3?**  
- **Are there any interesting seasonal patterns?**
:::
